service: crud-serverless-users

provider:
  name: aws
  runtime: nodejs18.x
  apiGateway:
    apiKeys:
      - ${self:service}-apiKey
  # iam:
  # role:
  #   statements:
  #     - Effect: Allow
  #       Action: 'dynamoDB:*'
  #       Resource: arn:aws:dynamodb:us-east-1:125137910162:table/usersTable
  #     - Effect: Allow
  #       Action:
  #         - 's3:GetObject'
  #         - 's3:PutObject'
  #       Resource: 'arn:aws:s3:::${self:service}-bucket/*'
  s3:
    bucketOne:
      name: ${self:service}-bucket
      versioningConfiguration:
        Status: Enabled

  environment:
    bucketName: ${self:service}-bucket
    SECRET_EGG: ${ssm:/SECRET_EGG}

plugins:
  - serverless-iam-roles-per-function
  - serverless-apigateway-service-proxy
  - serverless-lift

constructs:
  ${self:service}-queue:
    type: queue
    batchSize: 1
    worker:
      handler: likeUser/likeUser-App.likeUser
      reservedConcurrency: 1
      package:
        patterns:
          - 'likeUser/likeUser-App.mjs'
    extensions:
      queue:
      Properties:
        QueueName: likequeue

package:
  individually: true
  patterns:
    - '!*/**'
    - '!*'
    - '!node_modules/*'

custom:
  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true

  apiGatewayServiceProxies:
    - sqs:
        path: /likeuser
        method: post
        queueName: likequeue
        cors: true
        response:
          template:
            # `success` is used when the integration response is 200
            success: |-
              { "message: "accepted" }
            # `clientError` is used when the integration response is 400
            clientError: |-
              { "message": "there is an error in your request" }
            # `serverError` is used when the integration response is 500
            serverError: |-
              { "message": "there was an error handling your request" }

functions:
  get_userid:
    handler: READ/get_userid.get_userid
    iamRoleStatementsName: get_userid_role
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:BatchGet*
        Resource: 'arn:aws:dynamodb:us-east-1:125137910162:table/usersTable'
    package:
      patterns: 'READ/get_userid.mjs'
    events:
      - http:
          path: users/{id}
          method: GET
          request:
            parameters:
              paths:
                id: true

  get_users:
    handler: READ/get_users.get_users
    iamRoleStatementsName: get_users_role
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:Scan
        Resource: 'arn:aws:dynamodb:us-east-1:125137910162:table/usersTable'
    package:
      patterns: 'READ/get_users.mjs'
    events:
      - http:
          private: true
          path: users
          method: GET

  post_user:
    handler: CREATE/post_user.post_user
    iamRoleStatementsName: post_user_role
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:PutItem
        Resource: 'arn:aws:dynamodb:us-east-1:125137910162:table/usersTable'
    package:
      patterns: 'CREATE/post_user.mjs'
    events:
      - http:
          path: users
          method: POST
          request:
            schemas:
              application/json: ${file(schemas/user_schema.json)}

  update_user:
    handler: UPDATE/update_user.update_user
    iamRoleStatementsName: update_user_role
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:Update*
        Resource: 'arn:aws:dynamodb:us-east-1:125137910162:table/usersTable'
    package:
      patterns: 'UPDATE/update_user.mjs'
    events:
      - http:
          path: users/{id}
          method: PATCH
          request:
            parameters:
              paths:
                id: true
            schemas:
              application/json: ${file(schemas/user_schema.json)}

  delete_user:
    handler: DELETE/delete_user.delete_user
    iamRoleStatementsName: delete_user_role
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:Delete*
        Resource: 'arn:aws:dynamodb:us-east-1:125137910162:table/usersTable'
    package:
      patterns: 'DELETE/delete_user.mjs'
    events:
      - http:
          path: users/{id}
          method: DELETE
          request:
            parameters:
              paths:
                id: true

  signed_URL:
    handler: pre-signed_URL/signed_URL.signed_URL
    iamRoleStatementsName: pre-signed_URL_role
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 's3:GetObject'
          - 's3:PutObject'
        Resource: 'arn:aws:s3:::${self:service}-bucket/*'
    package:
      patterns: 'pre-signed_URL/signed_URL.mjs'
    events:
      - http:
          path: signedurl
          method: GET
          request:
            parameters:
              querystrings:
                filename: true

  thumbnail_app:
    handler: thumbnail/thumbnail_app.thumbnail_app
    layers:
      - !Ref BaseLambdaLayer
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 's3:*'
        Resource: 'arn:aws:s3:::${self:service}-bucket/*'
    package:
      patterns:
        - 'thumbnail/thumbnail_app.mjs'
    events:
      - s3:
          bucket: ${self:service}-bucket
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: uploads/

layers:
  Base:
    name: 'thumbnail-prod-dep'
    compatibleRuntimes:
      - 'nodejs18.x'
    package:
      artifact: app/nodejs.zip

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    S3Bucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${self:service}-bucket
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false

    S3BucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        Bucket:
          Ref: 'S3Bucket'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - 's3:GetObject'
                - 's3:PutObject'
              Resource:
                Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: 'S3Bucket'
                    - '/*'
